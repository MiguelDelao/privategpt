version: '3.8'

services:
  # Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: traefik-gateway
    ports:
      - "8080:8080"  # Main application port
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/etc/traefik
      - traefik-certs:/certs
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-stripprefix"
      - "traefik.http.middlewares.dashboard-stripprefix.stripprefix.prefixes=/dashboard"
      - "logging.service=traefik"

  # Authentication Service
  auth-service:
    build: ./docker/auth-service
    container_name: auth-service
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-24}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL:-admin@admin.com}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD:-admin}
    volumes:
      - auth-data:/app/data
      - ./logs/auth:/app/logs
    networks:
      - legal-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "logging.service=auth-service"

  # Main Streamlit Application
  streamlit-app:
    build: ./docker/streamlit
    container_name: streamlit-app
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8000
      - OLLAMA_URL=http://ollama:11434
      - WEAVIATE_URL=http://weaviate:8080
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - ./data/uploads:/app/uploads
      - ./logs/app:/app/logs
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - auth-service
      - ollama
      - weaviate
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=PathPrefix(`/`)"
      - "traefik.http.services.app.loadbalancer.server.port=8501"
      - "logging.service=streamlit"

  # LLM Serving with Ollama
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-service
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-5m}
      - OLLAMA_ORIGINS=${OLLAMA_ORIGINS:-*}
      - OLLAMA_DEBUG=${OLLAMA_DEBUG:-false}
      - OLLAMA_MODEL_DEV=${OLLAMA_MODEL_DEV:-llama3:8b}
      - OLLAMA_MODEL_PROD=${OLLAMA_MODEL_PROD:-llama3:70b}
    volumes:
      - ollama-data:/root/.ollama
      - ./logs/ollama:/var/log/ollama
    networks:
      - legal-ai-network
    restart: unless-stopped
    entrypoint: /bin/sh
    command: >
      -c "
      set -e;
      /bin/ollama serve &
      OLLAMA_PID=$$!;
      echo 'Waiting for Ollama to start...';
      sleep 15;
      echo 'Attempting to pull model: $${OLLAMA_MODEL_DEV:-llama3:8b}';
      ollama pull $${OLLAMA_MODEL_DEV:-llama3:8b};
      echo 'Model pull attempt finished. Ollama service (PID $$OLLAMA_PID) continues in background.';
      wait $$OLLAMA_PID;
      "
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "logging.service=ollama"

  # Vector Database with Auto-chunking
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: weaviate-db
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - AUTHENTICATION_APIKEY_ENABLED=false
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=text2vec-transformers
      - ENABLE_MODULES=text2vec-transformers
      - CLUSTER_HOSTNAME=node1
      - TRANSFORMERS_INFERENCE_API=http://t2v-transformers:8080
    volumes:
      - weaviate-data:/var/lib/weaviate
      - ./logs/weaviate:/var/log/weaviate
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - t2v-transformers
    labels:
      - "logging.service=weaviate"

  # BGE Embeddings Service
  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2-1.8.5
    container_name: bge-embeddings
    environment:
      - ENABLE_CUDA=0  # CPU-based for cost efficiency
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "logging.service=embeddings"

  # Document Processing Workflows
  n8n:
    build: ./docker/n8n
    container_name: n8n-automation
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_PATH=/n8n
      - WEBHOOK_URL=http://localhost:8080/n8n/
      - N8N_EDITOR_BASE_URL=http://localhost:8080/n8n/
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - NODE_ENV=production
    volumes:
      - n8n-data:/home/node/.n8n
      - ./data/uploads:/app/uploads
      - ./logs/n8n:/app/logs
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - weaviate
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=PathPrefix(`/n8n`)"
      - "traefik.http.routers.n8n.middlewares=n8n-stripprefix"
      - "traefik.http.middlewares.n8n-stripprefix.stripprefix.prefixes=/n8n"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "logging.service=n8n"

  # ELK Stack and Beats
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "logging.service=elasticsearch"

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.1
    container_name: logstash
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    labels:
      - "logging.service=logstash"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "5601:5601"
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=PathPrefix(`/kibana`)"
      - "traefik.http.routers.kibana.middlewares=kibana-stripprefix"
      - "traefik.http.middlewares.kibana-stripprefix.stripprefix.prefixes=/kibana"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
      - "logging.service=kibana"

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.1
    container_name: filebeat
    user: root
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/legal-ai:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - logstash
    command: filebeat -e -strict.perms=false
    labels:
      - "logging.service=filebeat"

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.11.1
    container_name: metricbeat
    user: root
    volumes:
      - ./config/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - elasticsearch
    command: metricbeat -e -strict.perms=false
    labels:
      - "logging.service=metricbeat"

networks:
  legal-ai-network:
    driver: bridge

volumes:
  # Data persistence
  ollama-data:
  weaviate-data:
  auth-data:
  n8n-data:
  elasticsearch-data:

  # SSL certificates
  traefik-certs: