version: "3.9"
services:
  base:
    image: privategpt/base:latest
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    profiles: ["build"]

  db:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: privategpt
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: privategpt
    volumes:
      - db-data:/var/lib/postgresql/data

  keycloak-db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_secret
      POSTGRES_DB: keycloak
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_secret
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8180
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
    command: start-dev
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - "8180:8080"
    healthcheck:
      test: ["CMD-SHELL", "timeout 10s bash -c '</dev/tcp/localhost/8080'"]
      interval: 15s
      timeout: 5s
      retries: 10
    labels:
      - logging.service=keycloak

  keycloak-setup:
    image: alpine:latest
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL:-admin@admin.com}
      DEFAULT_ADMIN_USERNAME: ${DEFAULT_ADMIN_USERNAME:-admin@admin.com}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD:-admin}
    volumes:
      - ./scripts/init-keycloak-realm.sh:/init-keycloak-realm.sh:ro
      - ./config/keycloak/realm-export.json:/config/realm-export.json:ro
    command: >
      sh -c "
        apk add --no-cache curl jq &&
        sh /init-keycloak-realm.sh
      "
    restart: "no"

  redis:
    image: redis:7-alpine
    restart: unless-stopped

  gateway-service:
    build:
      context: .
      dockerfile: docker/gateway/Dockerfile
    depends_on:
      keycloak:
        condition: service_healthy
      db:
        condition: service_healthy
      llm-service:
        condition: service_started
      redis:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://privategpt:secret@db:5432/privategpt
      REDIS_URL: redis://redis:6379/0
      KEYCLOAK_URL: http://keycloak:8080
      RAG_SERVICE_URL: http://rag-service:8000
      LLM_SERVICE_URL: http://llm-service:8000
      OLLAMA_URL: http://ollama:11434
      SERVICE_NAME: gateway
    ports:
      - "8000:8000"
    labels:
      - logging.service=gateway

  rag-service:
    build:
      context: .
      dockerfile: docker/rag/Dockerfile
    depends_on:
      - db
      - redis
      - weaviate
    environment:
      DATABASE_URL: postgresql://privategpt:secret@db:5432/privategpt
      REDIS_URL: redis://redis:6379/0
      SERVICE_NAME: rag
    ports:
      - "8002:8000"
    labels:
      - logging.service=rag

  llm-service:
    build:
      context: .
      dockerfile: docker/llm/Dockerfile
    depends_on:
      - ollama
    environment:
      LLM_PROVIDER: ollama
      LLM_BASE_URL: http://ollama:11434
      LLM_DEFAULT_MODEL: ""
      SERVICE_NAME: llm
    ports:
      - "8003:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - logging.service=llm

  mcp-service:
    build:
      context: .
      dockerfile: docker/mcp/Dockerfile
    depends_on:
      - gateway-service
      - rag-service
      - llm-service
    environment:
      RAG_SERVICE_URL: http://rag-service:8000
      LLM_SERVICE_URL: http://llm-service:8000
      GATEWAY_SERVICE_URL: http://gateway-service:8000
      SERVICE_NAME: mcp
    ports:
      - "8004:8000"
    labels:
      - logging.service=mcp

  weaviate:
    image: semitechnologies/weaviate:1.22.0
    restart: unless-stopped
    environment:
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: /var/lib/weaviate
    ports:
      - "8081:8080"

  nextjs-ui:
    build:
      context: .
      dockerfile: docker/nextjs-ui/Dockerfile
    depends_on:
      gateway-service:
        condition: service_started
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NODE_ENV: development
    ports:
      - "3000:3000"  # Direct access for development
    volumes:
      # Development mode: mount source for hot reload
      - "./src/privategpt_ui/sandbox-ui:/app:delegated"
      - "/app/node_modules"
      - "/app/.next"
    labels:
      - traefik.enable=true
      # Main UI: Root path -> Next.js UI (highest priority)
      - traefik.http.routers.nextjs.rule=Host(`localhost`)
      - traefik.http.routers.nextjs.entrypoints=web
      - traefik.http.routers.nextjs.priority=100
      - traefik.http.services.nextjs.loadbalancer.server.port=3000
      - logging.service=nextjs-ui

  ui-service:
    build:
      context: .
      dockerfile: docker/ui/Dockerfile
    depends_on:
      gateway-service:
        condition: service_started
    environment:
      GATEWAY_URL: http://gateway-service:8000
      LLM_URL: http://llm-service:8000
    ports:
      - "8080:8501"
    labels:
      - traefik.enable=true
      # Streamlit: /streamlit path -> Streamlit UI
      - traefik.http.routers.streamlit.rule=Host(`localhost`) && PathPrefix(`/streamlit`)
      - traefik.http.routers.streamlit.entrypoints=web
      - traefik.http.routers.streamlit.priority=50
      - traefik.http.routers.streamlit.middlewares=streamlit-stripprefix
      - traefik.http.middlewares.streamlit-stripprefix.stripprefix.prefixes=/streamlit
      - traefik.http.services.streamlit.loadbalancer.server.port=8501
      - logging.service=ui

  tests:
    build:
      context: .
      dockerfile: docker/tests/Dockerfile
    depends_on:
      - gateway-service
    command: pytest -q tests

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    labels:
      - traefik.enable=true
      # /logs -> Kibana (strip prefix before proxying)
      - traefik.http.routers.kibana.rule=PathPrefix(`/logs`)
      - traefik.http.routers.kibana.entrypoints=web
      - traefik.http.routers.kibana.middlewares=kibana-stripprefix
      - traefik.http.middlewares.kibana-stripprefix.stripprefix.prefixes=/logs
      - traefik.http.services.kibana.loadbalancer.server.port=5601
      - logging.service=kibana
      - traefik.http.routers.kibana.priority=10

  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-changeme}
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost/n/
      - RAG_SERVICE_URL=http://rag-service:8000
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - rag-service
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=PathPrefix(`/n`)
      - traefik.http.routers.n8n.entrypoints=web
      - traefik.http.routers.n8n.middlewares=n8n-stripprefix
      - traefik.http.middlewares.n8n-stripprefix.stripprefix.prefixes=/n
      - traefik.http.routers.n8n.priority=5
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      - logging.service=n8n

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.14.0
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - elasticsearch

  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"  # dashboard exposed under /dashboard/
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "8090:8080"  # Traefik dashboard (moved to avoid conflict with Weaviate)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`localhost`) && PathPrefix(`/dashboard`)
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.service=api@internal
      - logging.service=traefik

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - logging.service=ollama


volumes:
  db-data:
  keycloak-db-data:
  n8n_data:
  ollama_data:
