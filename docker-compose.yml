version: '3.8'

services:
  # Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: traefik-gateway
    ports:
      - "8080:8080"  # Main application port
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/etc/traefik
      - traefik-certs:/certs
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-stripprefix"
      - "traefik.http.middlewares.dashboard-stripprefix.stripprefix.prefixes=/dashboard"
      - "logging.service=traefik"

  # Authentication Service
  auth-service:
    build: ./docker/auth-service
    container_name: auth-service
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRATION_HOURS=${JWT_EXPIRATION_HOURS:-24}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL:-admin@admin.com}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD:-admin}
    volumes:
      - auth-data:/app/data
      - ./logs/auth:/app/logs
    networks:
      - legal-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "logging.service=auth-service"

  # Main Streamlit Application
  streamlit-app:
    build: ./docker/streamlit
    container_name: streamlit-app
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8000
      - OLLAMA_URL=http://ollama:11434
      - WEAVIATE_URL=http://weaviate:8080
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - ./data/uploads:/app/uploads
      - ./logs/app:/app/logs
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - auth-service
      - ollama
      - weaviate
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=PathPrefix(`/`)"
      - "traefik.http.services.app.loadbalancer.server.port=8501"
      - "logging.service=streamlit"

  # LLM Serving with Ollama
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-service
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-5m}
      - OLLAMA_ORIGINS=${OLLAMA_ORIGINS:-*}
      - OLLAMA_DEBUG=${OLLAMA_DEBUG:-false}
      - OLLAMA_MODEL_DEV=${OLLAMA_MODEL_DEV:-llama3:8b}
      - OLLAMA_MODEL_PROD=${OLLAMA_MODEL_PROD:-llama3:70b}
    volumes:
      - ollama-data:/root/.ollama
      - ./logs/ollama:/var/log/ollama
    networks:
      - legal-ai-network
    restart: unless-stopped
    command: >
      /bin/bash -c "
      /bin/ollama serve &
      OLLAMA_PID=$$!;
      echo 'Waiting for Ollama to start...';
      sleep 5;
      ollama pull ${OLLAMA_MODEL_DEV:-llama3:8b};
      wait $$OLLAMA_PID
      "
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "logging.service=ollama"

  # Vector Database with Auto-chunking
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: weaviate-db
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - AUTHENTICATION_APIKEY_ENABLED=false
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=text2vec-transformers
      - ENABLE_MODULES=text2vec-transformers
      - CLUSTER_HOSTNAME=node1
      - TRANSFORMERS_INFERENCE_API=http://t2v-transformers:8080
    volumes:
      - weaviate-data:/var/lib/weaviate
      - ./logs/weaviate:/var/log/weaviate
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - t2v-transformers
    labels:
      - "logging.service=weaviate"

  # BGE Embeddings Service
  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2-1.8.5
    container_name: bge-embeddings
    environment:
      - ENABLE_CUDA=0  # CPU-based for cost efficiency
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "logging.service=embeddings"

  # Document Processing Workflows
  n8n:
    build: ./docker/n8n
    container_name: n8n-automation
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_PATH=/n8n
      - WEBHOOK_URL=http://localhost:8080/n8n/
      - N8N_EDITOR_BASE_URL=http://localhost:8080/n8n/
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      - NODE_ENV=production
    volumes:
      - n8n-data:/home/node/.n8n
      - ./data/uploads:/app/uploads
      - ./logs/n8n:/app/logs
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - weaviate
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=PathPrefix(`/n8n`)"
      - "traefik.http.routers.n8n.middlewares=n8n-stripprefix"
      - "traefik.http.middlewares.n8n-stripprefix.stripprefix.prefixes=/n8n"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "logging.service=n8n"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.route-prefix=/prometheus'
      - '--web.external-url=http://localhost:8080/prometheus'
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "logging.service=prometheus"

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=http://localhost:8080/grafana
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,victoriametrics-logs-datasource
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
      - ./logs/grafana:/var/log/grafana
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - prometheus
      - victorialogs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "logging.service=grafana"

  victorialogs:
    image: victoriametrics/victoria-logs:v0.15.0-victorialogs
    container_name: victorialogs
    command:
      - "-storageDataPath=/victoria-logs-data"
      - "-httpListenAddr=:9428"
      - "-loggerOutput=stderr"
      - "-loggerLevel=INFO"
    volumes:
      - victorialogs-data:/victoria-logs-data
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.victorialogs.rule=PathPrefix(`/victorialogs`)"
      - "traefik.http.routers.victorialogs.middlewares=victorialogs-stripprefix"
      - "traefik.http.middlewares.victorialogs-stripprefix.stripprefix.prefixes=/victorialogs"
      - "traefik.http.services.victorialogs.loadbalancer.server.port=9428"
      - "logging.service=victorialogs"

  fluent-bit:
    image: fluent/fluent-bit:2.2.0
    container_name: fluent-bit
    volumes:
      - ./config/fluent-bit:/fluent-bit/etc
      - ./logs:/var/log/legal-ai:ro
      - /var/log:/var/log/system:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - legal-ai-network
    restart: unless-stopped
    depends_on:
      - victorialogs
    labels:
      - "logging.service=fluent-bit"

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.route-prefix=/alertmanager'
      - '--web.external-url=http://localhost:8080/alertmanager'
    volumes:
      - ./config/alertmanager:/etc/alertmanager
      - alertmanager-data:/alertmanager
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=PathPrefix(`/alertmanager`)"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"
      - "logging.service=alertmanager"

  # System Monitoring
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "logging.service=node-exporter"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - legal-ai-network
    restart: unless-stopped
    labels:
      - "logging.service=cadvisor"

networks:
  legal-ai-network:
    driver: bridge

volumes:
  # Data persistence
  ollama-data:
  weaviate-data:
  auth-data:
  n8n-data:
  
  # Monitoring data
  prometheus-data:
  grafana-data:
  alertmanager-data:
  
  # SSL certificates
  traefik-certs:
  victorialogs-data: 