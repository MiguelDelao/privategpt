version: "3.9"
services:
  base:
    image: privategpt/base:latest
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    profiles: ["build"]

  db:
    image: postgres:16
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: privategpt
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: privategpt
    volumes:
      - db-data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: unless-stopped

  auth-service:
    build:
      context: .
      dockerfile: docker/auth/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://privategpt:secret@db:5432/privategpt
      REDIS_URL: redis://redis:6379/0
      SERVICE_NAME: auth
    ports:
      - "8001:8000"
    labels:
      - logging.service=auth

  rag-service:
    build:
      context: .
      dockerfile: docker/rag/Dockerfile
    depends_on:
      - db
      - redis
      - weaviate
    environment:
      DATABASE_URL: postgresql://privategpt:secret@db:5432/privategpt
      REDIS_URL: redis://redis:6379/0
      SERVICE_NAME: rag
    ports:
      - "8002:8000"
    labels:
      - logging.service=rag

  weaviate:
    image: semitechnologies/weaviate:1.22.0
    restart: unless-stopped
    environment:
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: /var/lib/weaviate
    ports:
      - "8080:8080"

  ui-service:
    build:
      context: .
      dockerfile: docker/ui/Dockerfile
    depends_on:
      auth-service:
        condition: service_started
    environment:
      AUTH_URL: http://auth-service:8000
    ports:
      - "8501:8501"
    labels:
      - traefik.enable=true
      # Root path -> Streamlit UI
      - traefik.http.routers.streamlit.rule=Host(`localhost`)
      - traefik.http.routers.streamlit.entrypoints=web
      - traefik.http.routers.streamlit.priority=1
      - traefik.http.services.streamlit.loadbalancer.server.port=8501
      - logging.service=ui

  tests:
    build:
      context: .
      dockerfile: docker/tests/Dockerfile
    depends_on:
      - auth-service
    command: pytest -q tests

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    labels:
      - traefik.enable=true
      # /logs -> Kibana (strip prefix before proxying)
      - traefik.http.routers.kibana.rule=PathPrefix(`/logs`)
      - traefik.http.routers.kibana.entrypoints=web
      - traefik.http.routers.kibana.middlewares=kibana-stripprefix
      - traefik.http.middlewares.kibana-stripprefix.stripprefix.prefixes=/logs
      - traefik.http.services.kibana.loadbalancer.server.port=5601
      - logging.service=kibana
      - traefik.http.routers.kibana.priority=10

  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-changeme}
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost/n/
      - RAG_SERVICE_URL=http://rag-service:8000
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - rag-service
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=PathPrefix(`/n`)
      - traefik.http.routers.n8n.entrypoints=web
      - traefik.http.routers.n8n.middlewares=n8n-stripprefix
      - traefik.http.middlewares.n8n-stripprefix.stripprefix.prefixes=/n
      - traefik.http.routers.n8n.priority=5
      - traefik.http.services.n8n.loadbalancer.server.port=5678
      - logging.service=n8n

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.14.0
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      - elasticsearch

  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"  # dashboard exposed under /dashboard/
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "8090:8080"  # Traefik dashboard (moved to avoid conflict with Weaviate)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`localhost`) && PathPrefix(`/dashboard`)
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.service=api@internal
      - logging.service=traefik

volumes:
  db-data:
  n8n_data:
