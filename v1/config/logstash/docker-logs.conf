input {
  # Test file input to verify pipeline works
  file {
    path => "/tmp/test-logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "docker"
    tags => ["docker", "test"]
  }
  
  # Docker container logs via file monitoring
  file {
    path => "/var/lib/docker/containers/*/*-json.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "docker"
    tags => ["docker"]
  }
}

filter {
  if [type] == "docker" {
    # Extract container info from file path
    grok {
      match => { 
        "path" => "/var/lib/docker/containers/%{DATA:container_id}/%{GREEDYDATA}" 
      }
    }

    # Get short container ID
    mutate {
      add_field => { "container_short_id" => "%{container_id}" }
    }
    
    mutate {
      gsub => [ "container_short_id", "^(.{12}).*", "\\1" ]
    }

    # Parse the Docker log JSON structure
    if [log] {
      mutate {
        rename => { "log" => "raw_message" }
      }
    }

    # Extract structured log information - Generic logger format (logger=X level=Y msg='...')
    if [raw_message] =~ /logger=/ {
      grok {
        match => { 
          "raw_message" => "(?:logger=%{DATA:logger_name})?(?:\\s+t=%{DATA:log_timestamp})?(?:\\s+level=%{WORD:log_level})?(?:\\s+msg=['\"]?(?<clean_message>[^'\"]*)['\"]?)?" 
        }
        tag_on_failure => ["_grokparsefailure_generic"]
      }
    }
    
    # If no specific pattern matched, use the raw message as clean message
    if ![clean_message] {
      mutate {
        add_field => { "clean_message" => "%{raw_message}" }
      }
    }

    # Set service name (simplified)
    mutate {
      add_field => { "service_name" => "unknown" }
      add_field => { "terminal_message" => "%{clean_message}" }
      add_field => { "container" => "%{container_short_id}" }
    }

    # Clean up fields
    mutate {
      remove_field => [ "path", "host", "@version", "raw_message" ]
    }
  }
}

output {
  # Send to Elasticsearch with simple configuration
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "docker-logs-%{+YYYY.MM.dd}"
  }

  # Debug output
  stdout {
    codec => rubydebug
  }
} 